jpsType: update
id: mysql-galera-cluster
name: MariaDB Galera Cluster
description: MariaDB Galera Auto Clustering

success:
  text: ../texts/phpmyadmin-credentials.md

nodeGroupAlias:
  "${targetNodes.nodeGroup}": sqldb

globals:
  PATH: ${settings.path}
  DB_USER: ${settings.db_user}
  DB_PASS: ${settings.db_pass}
  CLUSTER_NAME: galera-${env.name}
  GALERA_CONF: /etc/mysql/conf.d/galera.cnf
  CUSTOM_CONF: ${settings.custom_conf}

onBeforeScaleOut[sqldb]:
  - checkGaleraClusterSize
  - if (!${globals.galeraClusterSizeOk}):
    - stopEvent:
        type: warning
        message: "Galera cluster size is wrong. Aborting"

onAfterScaleOut[sqldb]:
  - forEach(event.response.nodes):
      initialSetup:
        id: ${@i.id}
  - setupSeeds
  - forEach(event.response.nodes):
    - setupInstance:
        id: ${@i.id}
        ip: ${@i.intIP}
    - wsrepSlaveThreads:
        id: ${@i.id}
    - cmd[${@i.id}]: jem service restart

onAfterScaleIn[sqldb]:
  setupSeeds
  
onAfterMigrate:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    nodeGroup: sqldb
    settings:
      db_user: jelastic-${fn.random}
      db_pass: ${fn.password(20)}
      path: ${globals.PATH}

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}
    nodeGroup: sqldb
    settings:
      db_user: jelastic-${fn.random}
      db_pass: ${fn.password(20)}
      path: ${globals.PATH}

onBeforeStop:
  - forEach(i:nodes.sqldb):
      env.control.StopNode [${@i.id}]
      
onAfterStart:   
  - if (nodes.proxy):
      cmd[proxy]: sudo service proxysql restart

onBeforeRestartNode[sqldb]:
  - restartNodesInOrder
  - stopEvent:
      type: success
      message: Galera cluster successfully restarted

onAfterSetCloudletCount[sqldb]:
  - forEach(i:nodes.sqldb):
    - wsrepSlaveThreads:
        id: ${@i.id}
    - cmd [${@i.id}]: sudo jem service restart;

onInstall:
  - resetCluster
  - restartNodesInOrder
  - initialSetup:
      id: sqldb
  - setupSeeds
  - forEach(i:nodes.sqldb):
      - setupInstance:
          id: ${@i.id}
          ip: ${@i.intIP}
      - wsrepSlaveThreads:
          id: ${@i.id}
  - cmd[${nodes.sqldb.master.id}]: jem service stop; sleep 5; pkill -9 mysql; pkill -9 mariadb; service httpd start; galera_new_cluster;
    user: root
  - forEach(n:nodes.sqldb):
      if (!${@n.ismaster}):
        cmd[${@n.id}]: jem service restart
        user: root
  - env.file.AddFavorite:
    nodeGroup: sqldb
    path: /var/lib/mysql/grastate.dat
    keyword: grastate.dat
    isDir: false
        
actions:
  initialSetup:
    - setupUser:
        id: ${this.id}
    - setNodeDisplayName[${this.id}]: Galera
      if (!/settings.custom_conf/.test("${globals.CUSTOM_CONF}")):
        cmd[${this.id}]: cd /etc/mysql/conf.d && wget ${globals.CUSTOM_CONF} &>> /var/log/run.log
        user: root
    - cmd[${this.id}]: |-
        [ -e /etc/systemd/system/mariadb.service.d ] && wget ${globals.PATH}/scripts/mariadb-systemd-override.conf -O /etc/systemd/system/mariadb.service.d/bootstrap.conf || wget ${globals.PATH}/scripts/mysql -O /etc/init.d/mysql;
        wget ${globals.PATH}/configs/galera-myisam.cnf -O ${globals.GALERA_CONF} &>> /var/log/run.log; wget ${globals.PATH}/scripts/setMySQLOOMScore -O /usr/local/sbin/setMySQLOOMScore; 
        chmod +x /usr/local/sbin/setMySQLOOMScore; echo '/etc/systemd/system/mariadb.service.d/bootstrap.conf' >> /etc/jelastic/redeploy.conf; systemctl daemon-reload
      user: root
    - cmd[${this.id}]: |-
        wget ${globals.PATH}/scripts/wsrep-notify.sh -O /var/lib/jelastic/bin/wsrep-notify.sh &>> /var/log/run.log
        wget ${globals.PATH}/configs/galera.cnf -O ${globals.GALERA_CONF} &>> /var/log/run.log
        chmod 700 /var/lib/jelastic/bin/wsrep-notify.sh &>> /var/log/run.log
        
  setupUser:
    cmd[${this.id}]: |-
      wget ${globals.PATH}/scripts/setupUser.sh -O ~/setupUser.sh &>> /var/log/run.log
      bash ~/setupUser.sh ${globals.DB_USER} ${globals.DB_PASS} &>> /var/log/run.log
    user: root

  setupSeeds:
    script: |
      var resp = jelastic.env.control.GetEnvInfo('${env.envName}', session);
      if (resp.result != 0) return resp;
      var intIP = [];
      for (var i = 0, n = resp.nodes; i < n.length; i++)
        n[i].nodeGroup == "sqldb" ? intIP.push(n[i].intIP) : 0
      resp = {result:0, onAfterReturn: {}};
      resp.onAfterReturn['cmd[sqldb]'] = 'sed -i "s|wsrep_cluster_address.*|wsrep_cluster_address = gcomm://'+ intIP.join(',') +'|g " ${globals.GALERA_CONF}';
      resp.onAfterReturn['user'] = 'root';
      return resp;
  
  setupInstance:
    cmd[${this.id}]: |-
      sed -i "s/server_id.*/server_id = $(echo '${env.region}' | md5sum | grep -Eo "[[:digit:]]{3}"  | head -n1)/" ${globals.GALERA_CONF}
      sed -i "s/bind-address.*/bind-address = $(hostname | cut -d'-' -f 1)/" ${globals.GALERA_CONF}
      sed -i "s/report_host.*/report_host = $(hostname | cut -d'-' -f 1)/" ${globals.GALERA_CONF}
      sed -i "s/wsrep_cluster_name.*/wsrep_cluster_name = ${globals.CLUSTER_NAME}/" ${globals.GALERA_CONF}
      sed -i "s/wsrep_node_name.*/wsrep_node_name = $(hostname | cut -d'-' -f 1)/" ${globals.GALERA_CONF}
      sed -i "s/wsrep_node_address.*/wsrep_node_address = ${this.ip}/" ${globals.GALERA_CONF}
 
  wsrepSlaveThreads:
    cmd[${this.id}]: sed -i "s/wsrep_slave_threads.*/wsrep_slave_threads = $(nproc --all)/" ${globals.GALERA_CONF}
 
  resetCluster:
    - cmd[sqldb]: |-
        [ -f ${globals.GALERA_CONF} ] && rm -f ${globals.GALERA_CONF}
        [ -f /var/lib/mysql/grastate.dat ] && rm -f /var/lib/mysql/grastate.dat
        [ -f /var/lib/mysql/gvwstate.dat ] && rm -f /var/lib/mysql/gvwstate.dat
        [ -f /var/lib/mysql/galera.cache ] && rm -f /var/lib/mysql/galera.cache
        pgrep mysql 1>/dev/null && pkill -9 mysql;
        pgrep mariadb 1>/dev/null && pkill -9 mariadb || true
      user: root
 
  restartNodesInOrder:
    - forEach(i:nodes.sqldb):
        cmd [${@i.id}]: sudo jem service restart

  checkGaleraClusterSize:
    # Ensure the cluster size match the node count
    - cmd[${nodes.sqldb.first.id}]: |-
        MYSQL_PWD=${globals.DB_PASS} mysql -u${globals.DB_USER} -Nse "show global status like 'wsrep_cluster_size';" | awk '{print $NF}'
    - if ("${response.out}" == "${nodes.sqldb.length}"):
        setGlobals:
          galeraClusterSizeOk: True
    - else:
        setGlobals:
          galeraClusterSizeOk: False
